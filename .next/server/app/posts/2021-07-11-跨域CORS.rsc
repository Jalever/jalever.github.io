1:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/3e50223f751b8206.css",{"as":"style"}]
0:[[["",{"children":["posts",{"children":[["slug","2021-07-11-%E8%B7%A8%E5%9F%9FCORS","c"],{"children":["__PAGE__?{\"slug\":[\"2021-07-11-跨域CORS\"]}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/3e50223f751b8206.css","precedence":"next"}]],["$L4",["$","meta",null,{"name":"next-size-adjust"}]]]]]
5:I{"id":"394","chunks":["485:static/chunks/485-3071997949e00430.js","185:static/chunks/app/layout-308027d3a022f68f.js"],"name":"ThemeProvider","async":false}
6:I{"id":"7749","chunks":["485:static/chunks/485-3071997949e00430.js","185:static/chunks/app/layout-308027d3a022f68f.js"],"name":"ModeToggle","async":false}
7:I{"id":"6485","chunks":["485:static/chunks/485-3071997949e00430.js","931:static/chunks/app/page-fde65408e3bd02dc.js"],"name":"","async":false}
8:I{"id":"5813","chunks":["272:static/chunks/webpack-008eeab58a60626f.js","508:static/chunks/3949d24b-b3670977323a3ac7.js","604:static/chunks/604-576b6ce5c58b6c72.js"],"name":"","async":false}
9:I{"id":"8464","chunks":["272:static/chunks/webpack-008eeab58a60626f.js","508:static/chunks/3949d24b-b3670977323a3ac7.js","604:static/chunks/604-576b6ce5c58b6c72.js"],"name":"","async":false}
b:I{"id":"9422","chunks":["485:static/chunks/485-3071997949e00430.js","185:static/chunks/app/layout-308027d3a022f68f.js"],"name":"Analytics","async":false}
3:[["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased min-h-screen bg-white dark:bg-slate-950 text-slate-900 dark:text-slate-50 __className_a184c8","children":["$","$L5",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"children":[["$","div",null,{"className":"max-w-2xl mx-auto py-10 px-4","children":[["$","header",null,{"children":["$","div",null,{"className":"flex items-center justify-between","children":[["$","$L6",null,{}],["$","nav",null,{"className":"ml-auto text-sm font-medium space-x-6","children":[["$","$L7",null,{"href":"/","children":"Home"}],["$","$L7",null,{"href":"/about","children":"About"}]]}]]}]}],["$","main",null,{"children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children",["slug","2021-07-11-%E8%B7%A8%E5%9F%9FCORS","c"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L9",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":"$undefined","childProp":{"current":["$La",null],"segment":"__PAGE__?{\"slug\":[\"2021-07-11-跨域CORS\"]}"},"styles":[]}],"segment":["slug","2021-07-11-%E8%B7%A8%E5%9F%9FCORS","c"]},"styles":[]}],"segment":"posts"},"styles":[]}]}]]}],["$","$Lb",null,{}]]}]}]}],null]
4:[[["$","meta",null,{"charSet":"utf-8"}],["$","title",null,{"children":"2021-07-11-跨域CORS"}],["$","meta",null,{"name":"description","content":"这篇文章详细介绍了跨域资源共享（CORS）的概念、同源策略及其限制，并提供了多种跨域解决方案。"}],null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,[null,[["$","link",null,{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"any"}]],[],null]]
a:["$","article",null,{"className":"py-6 prose dark:prose-invert","children":[["$","h1",null,{"className":"mb-2","children":"2021-07-11-跨域CORS"}],["$","p",null,{"className":"text-xl mt-0 text-slate-700 dark:text-slate-200","children":"这篇文章详细介绍了跨域资源共享（CORS）的概念、同源策略及其限制，并提供了多种跨域解决方案。"}],["$","hr",null,{"className":"my-4"}],[["$","h1",null,{"children":"跨域CORS总结"}],"\n",["$","h2",null,{"children":"什么是同源策略?"}],"\n",["$","p",null,{"children":"浏览器安全的基石是\"同源政策\"(Same-Origin Policy)"}],"\n",["$","p",null,{"children":["所谓同源是指\"",["$","code",null,{"children":"协议"}],"+",["$","code",null,{"children":"域名"}],"+",["$","code",null,{"children":"端口"}],"\"三者相同, 即便两个不同的域名指向同一个 ip 地址，也非同源"]}],"\n",["$","p",null,{"children":"它是浏览器最核心也最基本的安全功能, 如果缺少了同源策略, 浏览器很容易受到 XSS、CSFR 等攻击"}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://www.notion.so//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b971011f36b42ec96f86feab7708793~tplv-k3u1fbpfcp-zoom-1.image","children":"https://www.notion.so//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b971011f36b42ec96f86feab7708793~tplv-k3u1fbpfcp-zoom-1.image"}]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"XSS: XSS 攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序\n跨站请求攻击: 简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的"}],"\n"]}],"\n",["$","h3",null,{"children":"常见的跨域场景"}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://imgse.com/i/pCKt7wT","children":["$","img",null,{"src":"https://s1.ax1x.com/2023/06/15/pCKt7wT.jpg","alt":"pCKt7wT.jpg"}]}]}],"\n",["$","h3",null,{"children":"同源策略限制以下几种行为"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"Cookie"}],"、",["$","code",null,{"children":"LocalStorage"}]," 和 ",["$","code",null,{"children":"IndexDB"}]," 无法读取"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"DOM"}]," 无法获得"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"AJAX"}]," 请求不能发送"]}],"\n"]}],"\n",["$","h2",null,{"children":"跨域解决方案"}],"\n",["$","h3",null,{"children":["通过",["$","code",null,{"children":"jsonp"}],"跨域"]}],"\n",["$","p",null,{"children":["利用",["$","code",null,{"children":"script"}],"标签不受跨域限制而形成的一种方案"]}],"\n",["$","p",null,{"children":"JSONP最基本的操作步骤可以概括为：在本地定义一个函数，然后引入服务器上的一个JS文件，JS文件中可以知道本地定义的函数并且进行调用，调用过程中可以传参，从而实现异步回调。"}],"\n",["$","p",null,{"children":"优缺点："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"JSONP"}],"是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小"]}],"\n",["$","li",null,{"children":["只能实现",["$","code",null,{"children":"get"}],"一种请求、不安全 容易遭到",["$","code",null,{"children":"XSS"}],"攻击"]}],"\n"]}],"\n",["$","p",null,{"children":"例如，本地定义一个A文件："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-html","children":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>CORS</title>\n  </head>\n  <body>\n    <p>koa-practice</p>\n    <script>\n      window.onJsonpCallback = function (res) {\n        console.log('res:')\n        console.log(res)\n        console.log('\\n')\n      }\n\n      function jsonp({ url }) {\n        let script = document.createElement('script')\n\n        script.src = `${url}`\n        document.body.appendChild(script)\n      }\n\n      jsonp({\n        url: 'http://localhost:3000/index.js',\n      })\n    </script>\n  </body>\n</html>\n"}]}],"\n",["$","p",null,{"children":"服务器上定义一个index.js文件:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"window['onJsonpCallback']('callback from static files')\n"}]}],"\n",["$","p",null,{"children":"结果如下:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"res:\ncallback from static files\n"}]}],"\n",["$","h3",null,{"children":["$","code",null,{"children":"CORS"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"CORS"}],"是一个",["$","code",null,{"children":"W3C"}],"标准，全称是\"跨域资源共享\"( ",["$","code",null,{"children":"Cross-Origin Resource Sharing"}]," )它允许浏览器向跨源服务器，发出",["$","code",null,{"children":"XMLHttpRequest"}],"请求，从而克服了",["$","code",null,{"children":"AJAX"}],"只能同源使用的限制"]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Tips: 普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。由于同源策略的限制，所读取的cookie为跨域请求接口所在域的cookie，而非当前页"}],"\n"]}],"\n",["$","p",null,{"children":"优缺点:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["目前，所有浏览器都支持该功能(IE8+：IE8/9 需要使用",["$","code",null,{"children":"XDomainRequest"}],"对象来支持",["$","code",null,{"children":"CORS"}],"）), ",["$","code",null,{"children":"CORS"}],"也已经成为主流的跨域解决方案"]}],"\n",["$","li",null,{"children":["整个",["$","code",null,{"children":"CORS"}],"通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，",["$","code",null,{"children":"CORS"}],"通信与同源的 AJAX 通信没有差别，代码完全一样. 浏览器一旦发现",["$","code",null,{"children":"AJAX"}],"请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求, 但用户不会有感觉"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"CORS"}],"与",["$","code",null,{"children":"JSONP"}],"的使用目的相同, 但是比",["$","code",null,{"children":"JSONP"}],"更强大。",["$","code",null,{"children":"JSONP"}],"只支持",["$","code",null,{"children":"GET"}],"请求, CORS 支持所有类型的",["$","code",null,{"children":"HTTP"}],"请求。",["$","code",null,{"children":"JSONP"}],"的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据"]}],"\n"]}],"\n",["$","p",null,{"children":["两种请求:\n浏览器将",["$","code",null,{"children":"CORS"}],"请求分成两类:"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"简单请求(Simple Request)"}],"\n",["$","li",null,{"children":"非简单请求(Not-so-Simple Request)"}],"\n"]}],"\n",["$","p",null,{"children":["只要同时满足以下两大条件, 就属于",["$","code",null,{"children":"简单请求"}],". 凡是不同时满足下面两个条件, 就属于",["$","code",null,{"children":"非简单请求"}]]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"请求方法是以下三种方法之一: GET, HEAD, POST"}],"\n",["$","li",null,{"children":"HTTP 的头信息不超出以下几种字段: Accept, Accept-Language, Content-Language, Content-Type(仅限于下列三个值: text/plain, multipart/form-data, application/x-www-form-urlencoded), DPR, Downlink, Save-Data, Viewport-Width, Width"}],"\n"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"简单请求"}],": 浏览器直接发出",["$","code",null,{"children":"CORS"}],"请求。具体来说，就是在头信息之中，增加一个",["$","code",null,{"children":"Origin"}],"字段。"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"非简单请求"}],": 是那种对服务器有特殊要求的请求，比如请求方法是",["$","code",null,{"children":"PUT"}],"或",["$","code",null,{"children":"DELETE"}],"，或者",["$","code",null,{"children":"Content-Type"}],"字段的类型是",["$","code",null,{"children":"application/json"}],". 非简单请求的",["$","code",null,{"children":"CORS"}],"请求会在正式通信之前，增加一次 HTTP 查询请求, 称为",["$","code",null,{"children":"预检请求"}],"(preflight). 浏览器先询问服务器, 当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些",["$","code",null,{"children":"HTTP"}],"动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的",["$","code",null,{"children":"XMLHttpRequest"}],"请求, 否则就报错"]}],"\n",["$","p",null,{"children":"Request Headers:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Access-Control-Request-Method"}],"\n",["$","li",null,{"children":"Access-Control-Request-Headers"}],"\n"]}],"\n",["$","p",null,{"children":["1.Access-Control-Request-Method\n该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些",["$","code",null,{"children":"HTTP"}],"方法"]}],"\n",["$","p",null,{"children":["2.Access-Control-Request-Headers\n该字段是一个逗号分隔的字符串，指定浏览器",["$","code",null,{"children":"CORS"}],"请求会额外发送的头信息字段"]}],"\n",["$","p",null,{"children":"Response Headers:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"Access-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000\n\n"}]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Access-Control-Allow-Origin"}],"\n",["$","li",null,{"children":"Access-Control-Allow-Credentials"}],"\n",["$","li",null,{"children":"Access-Control-Expose-Headers"}],"\n",["$","li",null,{"children":"Access-Control-Allow-Methods"}],"\n",["$","li",null,{"children":"Access-Control-Allow-Headers"}],"\n",["$","li",null,{"children":"Access-Control-Max-Age"}],"\n"]}],"\n",["$","p",null,{"children":["1.Access-Control-Allow-Origin\n2.Access-Control-Allow-Credentials\n该字段可选。它的值是一个布尔值，表示是否允许发送",["$","code",null,{"children":"Cookie"}],". 默认情况下，",["$","code",null,{"children":"Cookie"}],"不包括在",["$","code",null,{"children":"CORS"}],"请求之中。设为",["$","code",null,{"children":"true"}],"，即表示服务器明确许可，",["$","code",null,{"children":"Cookie"}],"可以包含在请求中，一起发给服务器。这个值也只能设为",["$","code",null,{"children":"true"}],"，如果服务器不要浏览器发送",["$","code",null,{"children":"Cookie"}],", 删除该字段即可"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"CORS"}],"请求默认不发送",["$","code",null,{"children":"Cookie"}],"和",["$","code",null,{"children":"HTTP"}],"认证信息。如果要把",["$","code",null,{"children":"Cookie"}],"发到服务器，一方面要服务器同意，指定",["$","code",null,{"children":"Access-Control-Allow-Credentials"}],"字段"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"Access-Control-Allow-Credentials: true\n\n"}]}],"\n",["$","p",null,{"children":["开发者必须在",["$","code",null,{"children":"AJAX"}],"请求中打开",["$","code",null,{"children":"withCredentials"}],"属性"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\n"}]}],"\n",["$","p",null,{"children":["否则，即使服务器同意发送",["$","code",null,{"children":"Cookie"}],"，浏览器也不会发送。或者，服务器要求设置",["$","code",null,{"children":"Cookie"}],"，浏览器也不会处理。"]}],"\n",["$","p",null,{"children":["但是，如果省略",["$","code",null,{"children":"withCredentials"}],"设置，有的浏览器还是会一起发送",["$","code",null,{"children":"Cookie"}],"。这时，可以显式关闭",["$","code",null,{"children":"withCredentials"}]]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"xhr.withCredentials = false;\n\n"}]}],"\n",["$","p",null,{"children":["需要注意的是，如果要发送",["$","code",null,{"children":"Cookie"}],"，",["$","code",null,{"children":"Access-Control-Allow-Origin"}],"就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，",["$","code",null,{"children":"Cookie"}],"依然遵循同源政策，只有用服务器域名设置的",["$","code",null,{"children":"Cookie"}],"才会上传，其他域名的",["$","code",null,{"children":"Cookie"}],"并不会上传，且（跨源）原网页代码中的",["$","code",null,{"children":"document.cookie"}],"也无法读取服务器域名下的",["$","code",null,{"children":"Cookie"}]]}],"\n",["$","p",null,{"children":["3.Access-Control-Expose-Headers\n该字段可选。",["$","code",null,{"children":"CORS"}],"请求时，",["$","code",null,{"children":"XMLHttpRequest"}],"对象的",["$","code",null,{"children":"getResponseHeader()"}],"方法只能拿到 6 个基本字段：",["$","code",null,{"children":"Cache-Control"}],"、",["$","code",null,{"children":"Content-Language"}],"、",["$","code",null,{"children":"Content-Type"}],"、",["$","code",null,{"children":"Expires"}],"、",["$","code",null,{"children":"Last-Modified"}],"、",["$","code",null,{"children":"Pragma"}],"。如果想拿到其他字段，就必须在",["$","code",null,{"children":"Access-Control-Expose-Headers"}],"里面指定。上面的例子指定，",["$","code",null,{"children":"getResponseHeader('FooBar')"}],"可以返回",["$","code",null,{"children":"FooBar"}],"字段的值"]}],"\n",["$","p",null,{"children":"6.Access-Control-Allow-Methods\n该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求"}],"\n",["$","p",null,{"children":["7.Access-Control-Allow-Headers\n如果浏览器请求包括",["$","code",null,{"children":"Access-Control-Request-Headers"}],"字段，则",["$","code",null,{"children":"Access-Control-Allow-Headers"}],"字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在\"预检\"中请求的字段"]}],"\n",["$","p",null,{"children":"8.Access-Control-Max-Age\n该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求"}],"\n",["$","p",null,{"children":["本地",["$","code",null,{"children":"localhost:8004"}],"页面代码示例:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"let xhr = new XMLHttpRequest();\n\n// 强制前端设置必须带上请示头cookie\ndocument.cookie = \"name=haoxl\";\n\nxhr.withCredentials = true;\nxhr.open(\"GET\", \"<http://localhost:3000/getData>\", true);\n\n// 设置自定义请求头\nxhr.setRequestHeader(\"name\", \"haoxl\");\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) {\n    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n      console.warn(\"xhr.response\");\n      console.log(xhr.response);\n      //获取后台传来的已改变name值的请示头\n      console.warn(\"xhr.getResponseHeader\");\n      console.log(xhr.getResponseHeader(\"name\"));\n      console.log(\"\\\\n\");\n    }\n  }\n};\nxhr.send();\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"node"}],"服务器代码(端口: ",["$","code",null,{"children":"3000"}],")示例:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"var express = require(\"express\");\nvar app = express();\n\nlet whiteList = [\"<http://localhost:8004>\"];\n\napp.use(function(req, res, next) {\n  let origin = req.headers.origin;\n\n  if (whiteList.includes(origin)) {\n    //设置那个源可以访问我，参数为 * 时，允许任何人访问，但是不可以和 cookie 凭证的响应头共同使用\n    res.setHeader(\"Access-Control-Allow-Origin\", origin);\n\n    //允许带有name的请求头的可以访问\n    res.setHeader(\"Access-Control-Allow-Headers\", \"name\");\n\n    // 设置哪些请求方法可访问\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n\n    // 设置带cookie请求时允许访问\n    res.setHeader(\"Access-Control-Allow-Credentials\", true);\n\n    // 后台改了前端传的name请示头后，再传回去时浏览器会认为不安全，所以要设置下面这个\n    res.setHeader(\"Access-Control-Expose-Headers\", \"name\");\n\n    // 预检的存活时间-options请示\n    res.setHeader(\"Access-Control-Max-Age\", 3);\n\n    // 设置当预请求发来请求时，不做任何处理\n    if (req.method === \"OPTIONS\") {\n      res.end(); //OPTIONS请示不做任何处理\n    }\n  }\n  next();\n});\n\napp.put(\"/getData\", function(req, res) {\n  res.end(\"hello world\");\n});\n\napp.get(\"/getData\", function(req, res) {\n  res.end(\"Nice to meet you\");\n});\n\napp.listen(3000, function() {\n  console.log(\"Example app listening on port 3000!\");\n});\n\n"}]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"document.domain"}]," + ",["$","code",null,{"children":"iframe"}],"跨域"]}],"\n",["$","p",null,{"children":["此方案仅限主域相同，子域不同的跨域应用场景(网页一级域名相同，只是二级域名不同)。实现原理：两个页面都通过",["$","code",null,{"children":"JavaScript"}],"强制设置",["$","code",null,{"children":"document.domain"}],"为基础主域，就实现了同域"]}],"\n",["$","p",null,{"children":["预设 a.html = ",["$","a",null,{"href":"http://www.haoxl.com/","children":"www.haoxl.com"}],", b.html = ",["$","a",null,{"href":"http://test.haoxl.com/","children":"test.haoxl.com"}]]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a.html"}],":"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"<iframe src=\"<http://test.haoxl.com>\" onload=\"load()\"></iframe>\n<script>\n  function load() {\n    //告诉页面它的主域名,要与b.html的主域名相同，这样才可在a中访问b的值\n    document.domain = \"haoxl.com\";\n    // 在a页面引入b页面后，直接通过下面方式获取b中的值\n    console.log(frame.contentWindow.b);\n  }\n</script>\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"b.html"}],":"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-html","children":"<html>\n  <head>\n    <title>b.html</title>\n    <meta charset=\"utf8\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n\n    <script>\n      window.domain = \"haoxl.com\";\n      function myFn() {\n        console.log(\"onload b.html\");\n        this.b = \"bHtml\";\n      }\n    </script>\n  </head>\n\n  **<body onload=\"myFn()\">\n    <p>b.html</p>\n  </body>\n</html>**\n\n"}]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"location.hash"}]," + ",["$","code",null,{"children":"iframe"}]]}],"\n",["$","p",null,{"children":["实现原理: ",["$","code",null,{"children":"a"}],"与",["$","code",null,{"children":"b"}],"跨域相互通信，通过中间页",["$","code",null,{"children":"c"}],"来实现(且",["$","code",null,{"children":"c"}],"与",["$","code",null,{"children":"a"}],"是同域)。 三个页面，不同域之间利用",["$","code",null,{"children":"iframe"}],"的",["$","code",null,{"children":"location.hash"}],"传值，相同域之间直接",["$","code",null,{"children":"JavaScript"}],"访问来通信"]}],"\n",["$","p",null,{"children":["具体实现：A 域: a.html -> B 域: b.html -> A 域: c.html，",["$","code",null,{"children":"a"}],"与",["$","code",null,{"children":"b"}],"不同域只能通过",["$","code",null,{"children":"hash"}],"值单向通信，",["$","code",null,{"children":"b"}],"与",["$","code",null,{"children":"c"}],"也不同域也只能单向通信，但",["$","code",null,{"children":"c"}],"与",["$","code",null,{"children":"a"}],"同域，所以",["$","code",null,{"children":"c"}],"可通过",["$","code",null,{"children":"parent.parent"}],"访问",["$","code",null,{"children":"a"}],"页面所有对象"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"%E8%B7%A8%E5%9F%9FCORS%E6%80%BB%E7%BB%93%201f17f0e7b2214641be26113aaf2defd3/8C478119-2E55-4DED-9C5A-74E67282709A.jpeg","alt":"%E8%B7%A8%E5%9F%9FCORS%E6%80%BB%E7%BB%93%201f17f0e7b2214641be26113aaf2defd3/8C478119-2E55-4DED-9C5A-74E67282709A.jpeg"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a.html"}],"( ",["$","a",null,{"href":"http://www.a.com/a.html","children":"www.a.com/a.html"}]," ):"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"<iframe\n  id=\"iframe\"\n  src=\"<http://www.b.com/b.html>\"\n  style=\"display:none;\"\n></iframe>\n<script>\n  var iframe = document.getElementById(\"iframe\");\n\n  // 向b.html传hash值\n  setTimeout(function() {\n    iframe.src = iframe.src + \"#user=admin\";\n  }, 1000);\n\n  // 开放给同域c.html的回调方法\n  function onCallback(res) {\n    alert(\"data from c.html ---> \" + res);\n  }\n</script>\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"b.html"}],"(",["$","a",null,{"href":"http://www.b.com/b.html","children":"www.b.com/b.html"}],"):"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"<iframe\n  id=\"iframe\"\n  src=\"<http://www.a.com/c.html>\"\n  style=\"display:none;\"\n></iframe>\n<script>\n  var iframe = document.getElementById(\"iframe\");\n\n  // 监听a.html传来的hash值，再传给c.html\n  window.onhashchange = function() {\n    iframe.src = iframe.src + location.hash;\n  };\n</script>\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"c.html"}],"(",["$","a",null,{"href":"http://www.a.com/c.html","children":"www.a.com/c.html"}],"):"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"<script>\n  // 监听b.html传来的hash值\n  window.onhashchange = function() {\n    // 再通过操作同域a.html的js回调，将结果传回\n    window.parent.parent.onCallback(\n      \"hello: \" + location.hash.replace(\"#user=\", \"\")\n    );\n  };\n</script>\n"}]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"window.name"}]," + ",["$","code",null,{"children":"iframe"}],"跨域"]}],"\n",["$","p",null,{"children":["浏览器窗口有",["$","code",null,{"children":"window.name"}],"属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。并且可以支持非常长的 ",["$","code",null,{"children":"name"}]," 值(2MB)"]}],"\n",["$","p",null,{"children":["父窗口先打开一个子窗口，载入一个不同源的网页，该网页将信息写入 ",["$","a",null,{"href":"http://window.name/","children":"window.name"}]," 属性"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"window.name = data;\n\n"}]}],"\n",["$","p",null,{"children":"接着，子窗口跳回一个与主窗口同域的网址:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"location = \"<http://parent.url.com/xxx.html>\";\n\n"}]}],"\n",["$","p",null,{"children":["然后，主窗口就可以读取子窗口的 ",["$","a",null,{"href":"http://window.name/","children":"window.name"}],":"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"var data = document.getElementById(\"myFrame\").contentWindow.name;\n"}]}],"\n",["$","p",null,{"children":["这种方法的优点是, ",["$","code",null,{"children":"window.name"}],"容量很大，可以放置非常长的字符串；缺点是必须监听子窗口",["$","code",null,{"children":"window.name"}],"属性的变化，影响网页性能"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a.html"}],"(",["$","a",null,{"href":"http://www.a.com/a.html","children":"www.a.com/a.html"}],"):"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"var proxy = function(url, callback) {\n  var state = 0;\n  var iframe = document.createElement(\"iframe\");\n\n  // 加载跨域页面\n  iframe.src = url;\n\n  // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n  iframe.onload = function() {\n    if (state === 1) {\n      // 第2次onload(同域c页)成功后，读取同域window.name中数据\n      callback(iframe.contentWindow.name);\n      destoryFrame();\n    } else if (state === 0) {\n      // 第1次onload(跨域页)成功后，切换到同域代理页面\n      iframe.contentWindow.location = \"<http://www.a.com/c.html>\";\n      state = 1;\n    }\n  };\n\n  document.body.appendChild(iframe);\n\n  // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）\n  function destoryFrame() {\n    iframe.contentWindow.document.write(\"\");\n    iframe.contentWindow.close();\n    document.body.removeChild(iframe);\n  }\n};\n\n// 请求跨域b页面数据\nproxy(\"http://www.b.com/b.html\", function(data) {\n  alert(data);\n});\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"c.html"}],"(",["$","a",null,{"href":"http://www.a.com/c.html","children":"www.a.com/c.html"}],"):\n中间代理页，与",["$","code",null,{"children":"a.html"}],"同域，内容为空即可"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"b.html"}],"(",["$","a",null,{"href":"http://www.b.com/b.html","children":"www.b.com/b.html"}],"):"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"<script>\n  window.name = \"This is b.html data!\";\n</script>\n\n"}]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"postMessage"}],"跨域"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"HTML5"}],"为了解决这个问题，引入了一个全新的",["$","code",null,{"children":"API"}],": 跨文档通信 ",["$","code",null,{"children":"API"}],"(",["$","code",null,{"children":"Cross-Document Messaging"}],")"]}],"\n",["$","p",null,{"children":["这个",["$","code",null,{"children":"API"}],"为",["$","code",null,{"children":"window"}],"对象新增了一个",["$","code",null,{"children":"window.postMessage"}],"方法，允许跨窗口通信，不论这两个窗口是否同源"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"postMessage"}],"方法的第一个参数是具体的信息内容，第二个参数是接收消息的窗口的源（origin），即\"",["$","code",null,{"children":"协议"}]," + ",["$","code",null,{"children":"域名"}]," + ",["$","code",null,{"children":"端口"}],"\", 也可以设为",["$","code",null,{"children":"*"}],"，表示不限制域名，向所有窗口发送."]}],"\n",["$","p",null,{"children":"它可用于解决以下方面的问题:"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"页面和其打开的新窗口的数据传递"}],"\n",["$","li",null,{"children":"多窗口之间消息传递"}],"\n",["$","li",null,{"children":"页面与嵌套的 iframe 消息传递"}],"\n",["$","li",null,{"children":"上面三个场景的跨域数据传递"}],"\n"]}],"\n",["$","p",null,{"children":["例子，",["$","code",null,{"children":"a.js"}]," ",["$","code",null,{"children":"b.js"}]," 用 node 启用两个不同端口号的接口来模拟本地实现跨域"]}],"\n",["$","p",null,{"children":["父窗口",["$","code",null,{"children":"localhost:4001/a.html"}],"向子窗口 localhost:4002/b.html 发消息，调用 ",["$","strong",null,{"children":"postMessage"}]," 方法就可以了. 父窗口和子窗口都可以通过",["$","code",null,{"children":"message"}],"事件，监听对方的消息"]}],"\n",["$","p",null,{"children":["用法: ",["$","code",null,{"children":"postMessage(data,origin)"}],"方法接受两个参数:"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"data"}],": ",["$","code",null,{"children":"HTML5"}],"规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用",["$","code",null,{"children":"JSON.stringify()"}],"序列化"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"origin"}],": 协议+主机+端口号，也可以设置为\"*\"，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为\"/\""]}],"\n"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a.html(http://localhost:3000/a.html)"}],":"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-html","children":"<html>\n  <head>\n    <title>1111111111</title>\n    <meta charset=\"utf-8\" />\n  </head>\n\n  <body>\n    <p>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p>\n  </body>\n\n  <script>\n    window.onmessage = function(e) {\n      console.warn(\"a.html:\");\n      console.log(e.data);\n      console.warn(\"e:\");\n      console.log(e);\n\n      e.source.postMessage(\"Nice to meet you!\", e.origin);\n    };\n  </script>\n</html>\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"b.html(<http://localhost:4000/b.html>)"}],":"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-html","children":"   <html>\n  <head>\n    <title>bbbbbbbbbbbbbbbbbb</title>\n    <meta charset=\"utf-8\" />\n  </head>\n\n  <body>\n    <iframe\n      src=\"http://localhost:3000/a.html\"\n      id=\"frame\"\n      onload=\"load()\"\n    ></iframe>\n  </body>\n\n  <script>\n    function load() {\n      l**et frame = document.getElementById(\"frame\")**;\n\n      frame.contentWindow.postMessage(\n        \"Hello from b.html\",\n        \"http://localhost:3000\"\n      );\n\n      window.onmessage = function(e) {\n        console.warn(\"b.html: \");\n        console.log(e.data);\n      };\n    }\n  </script>\n</html>\n\n"}]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"nginx"}],"代理跨域"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Nginx (engine x)"}]," 是一个高性能的 HTTP 和反向代理服务器，也是一个",["$","code",null,{"children":"IMAP"}],"/",["$","code",null,{"children":"POP3"}],"/",["$","code",null,{"children":"SMTP"}],"服务器"]}],"\n",["$","p",null,{"children":"Nginx 服务器具体配置:"}],"\n",["$","p",null,{"children":"nginx.conf:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   C:\\\\Projects\\\\Myself\\\\practice;\n            index  index.html index.htm;\n        }\n\n        location /api/ {\n            proxy_pass   http://www.jalever.top:4000;  #反向代理\n            proxy_cookie_domain www.jalever.top localhost;\n            add_header Access-Control-Allow-Origin http://www.jalever.top;  #当前端只跨域不带cookie时，可为*\n            add_header Access-Control-Allow-Credentials true;\n        }\n\n        # default\n        ...\n        ...\n    }\n\n"}]}],"\n",["$","p",null,{"children":"页面代码:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"function load() {\n  let xhr = new XMLHttpRequest();\n\n  xhr.withCredentials = true;\n\n  xhr.open(\"get\", \"<http://localhost:80/api/user=admin>\", true);\n  xhr.send();\n}\n\n"}]}],"\n",["$","p",null,{"children":"nodejs 后台代码:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-jsx","children":"var http = require(\"http\");\nvar server = http.createServer();\nvar qs = require(\"querystring\");\nvar PORT = process.env.PORT || 4000;\n\nserver.on(\"request\", function(req, res) {\n  var params = qs.parse(req.url.substring(2));\n\n  res.writeHead(200, {\n    \"Set-Cookie\": \"l=a123456;Path=/;Domain=www.jalever.top;HttpOnly\" // HttpOnly:脚本无法读取\n  });\n\n  res.write(JSON.stringify(params));\n  res.end();\n});\n\nserver.listen(PORT);\nconsole.log(\"server is listening on port: \", PORT);\n\n"}]}],"\n",["$","p",null,{"children":"result:"}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://www.notion.so//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d04a1d9bb7f442069237244a78c62606~tplv-k3u1fbpfcp-zoom-1.image","children":"https://www.notion.so//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d04a1d9bb7f442069237244a78c62606~tplv-k3u1fbpfcp-zoom-1.image"}]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"nodejs"}],"中间件代理跨域"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"NodeJS"}]," 中间件 ",["$","code",null,{"children":"http-proxy-middleware"}]," 实现跨域代理，原理大致与 ",["$","code",null,{"children":"nginx"}]," 相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置 ",["$","code",null,{"children":"cookieDomainRewrite"}]," 参数修改响应头中 ",["$","code",null,{"children":"cookie"}]," 中的域名，实现当前域的 ",["$","code",null,{"children":"cookie"}]," 写入，方便接口登录认证"]}],"\n",["$","h3",null,{"children":[["$","code",null,{"children":"WebSocket"}],"协议跨域"]}],"\n",["$","p",null,{"children":["WebSocket 对象提供了用于创建和管理 WebSocket 连接，以及可以通过该连接发送和接收数据的 API。它是基于 TCP 的全双工通信,即服务端和客户端可以双向进行通讯，并且允许跨域通讯。基本协议有",["$","code",null,{"children":"ws://"}],"(非加密)和",["$","code",null,{"children":"wss://"}],"(加密)"]}],"\n",["$","p",null,{"children":"页面代码例子:"}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"function load() {\n  let socket = new WebSocket(\"ws://localhost:3000\");\n  socket.onopen = function() {\n    socket.send(\"message from index.html\");\n  };\n\n  socket.onmessage = function(e) {\n    console.warn(\"e.data\");\n    console.log(e.data);\n  };\n}\n\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"node"}],"服务器代码:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"children":"var express = require(\"express\");\nvar WebSocket = require(\"ws\");\nvar port = process.env.PORT || 3000;\nvar wss = new WebSocket.Server({ port: port });\n\nwss.on(\"connection\", function(ws) {\n  ws.on(\"message\", function(data) {\n    console.log(\"----------data----------\");\n    console.log(data);\n    console.log(\"----------data----------\");\n\n    ws.send(\"data from node\");\n  });\n});\n\n"}]}],"\n",["$","h1",null,{"children":"参考链接"}],"\n",["$","p",null,{"children":["$","a",null,{"href":"http://www.ruanyifeng.com/blog/2016/04/cors.html","children":"跨域资源共享CORS详解"}]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://mp.weixin.qq.com/s/HrdksVChRa7cNyKxqruvOA","children":"15 张动图全面讲解跨域 CORS"}]}]]]}]
